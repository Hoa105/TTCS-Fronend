// import React, { useEffect, useState } from "react";
// import { useParams } from "react-router-dom";
// import { useDispatch } from "react-redux";
// import { addToCart } from "../slices/cartSilce";
// import "./../assets/css/ProductDetail.css";

// const ProductDetail = () => {
//   const { id } = useParams();
//   const dispatch = useDispatch();
//   const [product, setProduct] = useState(null);

//   useEffect(() => {
//     const fetchProducts = async () => {
//       try {
//         const response = await fetch(`http://localhost:8081/products/${id}`);

//         const data = await response.json();
//         setProduct(data.results);
//       } catch (err) {
//         console.error(err);
//       }
//     };
//     fetchProducts();
//   }, [id]);

//   if (!product) return <p>S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i!</p>;

//   return (
//     <div className="product-detail-container">
//       <div className="product-image">
//         <img src={product.image} alt={product.name} />
//       </div>

//       <div className="product-info">
//         <h1 className="product-name">{product.name}</h1>
//         <p className="product-price">{product.price.toLocaleString()} ‚Ç´</p>
//         <p className="product-description">{product.description}</p>
//         <p className="product-material">Ch·∫•t li·ªáu: {product.material}</p>
//         <p>Size: {product.size}</p>
//         <button
//           className="add-to-cart-btn"
//           onClick={() => dispatch(addToCart(product))}
//         >
//           üõí Th√™m v√†o gi·ªè h√†ng
//         </button>
//       </div>
//     </div>
//   );
// };

// export default ProductDetail;
import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import { useDispatch } from "react-redux";
import { addToCart } from "../slices/cartSilce"; // ƒê·ªïi t√™n slice n·∫øu c·∫ßn
import "./../assets/css/ProductDetail.css";

const ProductDetail = () => {
  const { id } = useParams();
  const dispatch = useDispatch();
  const [product, setProduct] = useState(null);
  const [selectedVariant, setSelectedVariant] = useState(null); // State ƒë·ªÉ l∆∞u size ƒë∆∞·ª£c ch·ªçn

  useEffect(() => {
    const fetchProduct = async () => {
      // ƒê·ªïi t√™n h√†m fetch cho r√µ r√†ng h∆°n
      try {
        const response = await fetch(`http://localhost:8081/products/${id}`);
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        // Gi·∫£ s·ª≠ API tr·∫£ v·ªÅ s·∫£n ph·∫©m trong data.results ho·∫∑c tr·ª±c ti·∫øp data
        const productData = data.results || data;
        setProduct(productData);
        // T·ª± ƒë·ªông ch·ªçn size ƒë·∫ßu ti√™n n·∫øu c√≥ variants
        if (
          productData?.variants &&
          productData.variants.length > 0 &&
          productData.variants[0] !== null
        ) {
          setSelectedVariant(productData.variants[0]);
        }
      } catch (err) {
        console.error("Failed to fetch product:", err);
        setProduct(null); // ƒê·∫∑t l·∫°i product th√†nh null n·∫øu c√≥ l·ªói
      }
    };
    fetchProduct();
  }, [id]);

  const handleAddToCart = () => {
    if (!selectedVariant) {
      alert("Vui l√≤ng ch·ªçn size s·∫£n ph·∫©m.");
      return;
    }
    if (selectedVariant.quantity <= 0) {
      alert("Size n√†y hi·ªán ƒë√£ h·∫øt h√†ng.");
      return;
    }
    // T·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng s·∫£n ph·∫©m m·ªõi bao g·ªìm th√¥ng tin size v√† s·ªë l∆∞·ª£ng ƒë∆∞·ª£c ch·ªçn
    // ƒë·ªÉ g·ª≠i v√†o gi·ªè h√†ng
    const productToAdd = {
      ...product,
      selectedSize: selectedVariant.size,
      // C√°c th√¥ng tin kh√°c b·∫°n mu·ªën th√™m v√†o cart item
      // V√≠ d·ª•: c√≥ th·ªÉ ch·ªâ c·∫ßn id, name, price, image, size, quantity=1
      cartItemId: `${product.id}-${selectedVariant.size}`, // T·∫°o ID duy nh·∫•t cho item trong gi·ªè h√†ng theo size
      price: product.price, // ƒê·∫£m b·∫£o gi√° ƒë√∫ng
      maxQuantity: selectedVariant.quantity,
      quantity: 1, // M·∫∑c ƒë·ªãnh th√™m 1 s·∫£n ph·∫©m v√†o gi·ªè
    };
    dispatch(addToCart(productToAdd));
  };

  // --- Render Loading ho·∫∑c Not Found ---
  if (product === null) {
    // C√≥ th·ªÉ th√™m tr·∫°ng th√°i loading ·ªü ƒë√¢y
    return <p>ƒêang t·∫£i th√¥ng tin s·∫£n ph·∫©m...</p>;
  }

  if (!product || !product.id) {
    // Ki·ªÉm tra k·ªπ h∆°n n·∫øu product kh√¥ng h·ª£p l·ªá
    return <p>S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i!</p>;
  }
  // --- K·∫øt th√∫c Render Loading ho·∫∑c Not Found ---

  // --- Ki·ªÉm tra v√† hi·ªÉn th·ªã Variants ---
  const renderVariants = () => {
    // Ki·ªÉm tra xem variants c√≥ ph·∫£i l√† m·∫£ng h·ª£p l·ªá kh√¥ng
    if (
      !Array.isArray(product.variants) ||
      product.variants.length === 0 ||
      product.variants[0] === null
    ) {
      // N·∫øu kh√¥ng c√≥ variants ho·∫∑c variants r·ªóng/null, c√≥ th·ªÉ hi·ªÉn th·ªã th√¥ng b√°o
      // ho·∫∑c x·ª≠ l√Ω logic cho s·∫£n ph·∫©m kh√¥ng c√≥ size (n·∫øu c√≥)
      // Trong tr∆∞·ªùng h·ª£p n√†y, ta s·∫Ω kh√¥ng hi·ªÉn th·ªã ph·∫ßn ch·ªçn size
      // v√† n√∫t Add to Cart c√≥ th·ªÉ c·∫ßn x·ª≠ l√Ω kh√°c ƒëi
      return <p>S·∫£n ph·∫©m n√†y hi·ªán ch∆∞a c√≥ th√¥ng tin size.</p>; // Ho·∫∑c return null n·∫øu kh√¥ng mu·ªën hi·ªÉn th·ªã g√¨
    }

    return (
      <div className="product-variants">
        <p>
          <strong>Ch·ªçn Size:</strong>
        </p>
        {product.variants.map((variant) => (
          <input
            type="button"
            key={`${product.id}-${variant.size}`}
            className={`variant-button ${
              selectedVariant?.size === variant.size ? "selected" : ""
            } ${variant.quantity <= 0 ? "disabled" : ""}`}
            onClick={() => {
              if (variant.quantity > 0) {
                setSelectedVariant(variant);
              }
            }}
            disabled={variant.quantity <= 0} // V√¥ hi·ªáu h√≥a n√∫t n·∫øu h·∫øt h√†ng
            title={
              variant.quantity <= 0
                ? "H·∫øt h√†ng"
                : `C√≤n ${variant.quantity} s·∫£n ph·∫©m`
            } // Th√™m tooltip
            value={`${variant.size}${
              variant.quantity <= 0 ? " (H·∫øt h√†ng)" : ""
            }`} // N·ªôi dung hi·ªÉn th·ªã tr√™n n√∫t
          />
        ))}
        {/* {selectedVariant && <p>S·ªë l∆∞·ª£ng c√≤n l·∫°i: {selectedVariant.quantity}</p>} */}
      </div>
    );
  };
  // --- K·∫øt th√∫c Ki·ªÉm tra v√† hi·ªÉn th·ªã Variants ---

  return (
    <div className="product-detail-container">
      <div className="product-image">
        {/* Th√™m ki·ªÉm tra product.image t·ªìn t·∫°i */}
        {product.image ? (
          <img src={product.image} alt={product.name} />
        ) : (
          <div className="no-image">No Image Available</div>
        )}
      </div>

      <div className="product-info">
        <h1 className="product-name">{product.name}</h1>
        {/* ƒê·∫£m b·∫£o product.price t·ªìn t·∫°i tr∆∞·ªõc khi g·ªçi toLocaleString */}
        <p className="product-price">
          {product.price ? `${product.price.toLocaleString()} ‚Ç´` : "Li√™n h·ªá"}
        </p>
        <p className="product-description">{product.description}</p>
        <p className="product-material">Ch·∫•t li·ªáu: {product.material}</p>

        {/* Hi·ªÉn th·ªã c√°c size v√† s·ªë l∆∞·ª£ng */}
        {renderVariants()}

        {selectedVariant && (
          <p className="variant-quantity-display">
            {" "}
            {/* Th√™m class ƒë·ªÉ d·ªÖ style n·∫øu c·∫ßn */}
            S·ªë l∆∞·ª£ng c√≤n l·∫°i: {selectedVariant.quantity}
          </p>
        )}

        {/* N√∫t th√™m v√†o gi·ªè h√†ng */}
        {/* Ch·ªâ hi·ªÉn th·ªã n√∫t n·∫øu c√≥ variants ho·∫∑c s·∫£n ph·∫©m kh√¥ng c·∫ßn size */}
        {Array.isArray(product.variants) &&
          product.variants.length > 0 &&
          product.variants[0] !== null && (
            <button
              className="add-to-cart-btn"
              onClick={handleAddToCart}
              disabled={!selectedVariant || selectedVariant.quantity <= 0} // Disable n·∫øu ch∆∞a ch·ªçn size ho·∫∑c size ƒë√£ ch·ªçn h·∫øt h√†ng
            >
              üõí Th√™m v√†o gi·ªè h√†ng
            </button>
          )}
        {/* C√≥ th·ªÉ th√™m logic cho s·∫£n ph·∫©m kh√¥ng c√≥ variant ·ªü ƒë√¢y n·∫øu c·∫ßn */}
        {(!Array.isArray(product.variants) ||
          product.variants.length === 0 ||
          product.variants[0] === null) && (
          <button
            className="add-to-cart-btn"
            onClick={() =>
              dispatch(
                addToCart({ ...product, quantity: 1, cartItemId: product.id })
              )
            } // X·ª≠ l√Ω add to cart cho sp kh√¥ng c√≥ variant
          >
            üõí Th√™m v√†o gi·ªè h√†ng
          </button>
        )}
      </div>
    </div>
  );
};

export default ProductDetail;
